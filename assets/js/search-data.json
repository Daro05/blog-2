{
  
    
        "post0": {
            "title": "Building a LIME explainer dashboard in Python",
            "content": ". Background . In an earlier post, I described how to explain a fine-grained sentiment classifier’s results using LIME (Local Interpretable Model-agnostic Explanations). To recap, the following six models were used to make fine-grained sentiment class predictions on the Stanford Sentiment Treebank (SST-5) dataset. . Rule-based models: TextBlob and VADER | Feature-based models: Logistic regression and Support Vector Machine | Embedding-based models: FastText and Flair | . A linear workflow was used to analyze and explain the sentiment classification results using each method. Each model was trained on 5 classes of sentiment (1 through 5), with 1 being “strongly negative”, 3 being “neutral” and 5 being “strongly positive”. . . The goal of this post is to show how to build an explainer dashboard (using any one of three frameworks) that takes in a trained model, and outputs LIME explanations for the prediction made by the model. . Example LIME explanation . Put simply, LIME generates an explanation object containing visualizations (as embedded JavaScript) that can be output to an HTML file, which can then be opened in any browser. A typical output from LIME is shown below. . . Why build an interactive dashboard app? . To explain a classifier’s results using LIME, it can be very cumbersome to have to write out individual HTML files each time an explanation needs to be made. An interactive dashboard is a very effective means to rapidly iterate through multiple test samples in real time, providing a user with immediate feedback on where a model is lacking. In addition, having a dashboard allows non-technical users (who may or may not know how to execute Python scripts) to be able to make their own explanations. . The below sections show how we can build LIME explainer dashboards using three different frameworks. . Explainer class . To easily reference each classifier’s predict methods, an object-oriented framework is applied to enable code reuse. A template for the explainer class is provided in the project’s GitHub repo. In a nutshell, a Python class is defined which takes in the list of variations generated by LIME (random text samples with tokens blanked out), following which we output a class probability for each sample as a numpy array. . class ExampleExplainer: &quot;&quot;&quot;Class to explain classification results. The `predict` method outputs a numpy array of floats, which is the classifier&#39;s prediction probability for each class. &quot;&quot;&quot; def __init__(self, path_to_model: str) -&gt; None: # Load in a trained classifier model def predict(self, texts: List[str]) -&gt; np.array([float, ...]): # Take in a list of strings (LIME text sample of variations) ... # Output class probabilities as a numpy array return np.array(predict_proba) . Once the class probabilities for each variation is returned, this can be fed to the LimeTextExplainer class (shown below). Enabling bag-of-words (bow) would mean that LIME doesn’t consider word order when generating variations. However, the FastText and Flair models were trained considering n-grams and contextual ordering respectively, so for a fair comparison between models, the bow flag option is disabled for all explanations on SST-5. . The exp object returned by the LIME explainer is an internal method that converts the local linear model’s predictions (in numerical form) to a visual, interpretable form, output as HTML. . def explainer( method: str, path_to_file: str, text: str, num_samples: int) -&gt; LimeTextExplainer: &quot;&quot;&quot;Run LIME explainer on provided classifier&quot;&quot;&quot; model = explainer_class(method, path_to_file) predictor = model.predict # Create a LimeTextExplainer explainer = LimeTextExplainer( # Specify split option for string split_expression=lambda x: x.split(), # Our classifer uses N-grams or contextual ordering to classify text # Hence, order matters, and we cannot use bag of words. bow=False, # Specify class names for this case class_names=[1, 2, 3, 4, 5] ) # Make a prediction and explain it: exp = explainer.explain_instance( text, classifier_fn=predictor, top_labels=1, num_features=20, num_samples=num_samples, ) return exp . The below sections describe how to encapsulate all these functions into an interactive dashboard app. . Option 1: Flask .",
            "url": "https://prrao87.github.io/blog/lime-explainer-dashboards/",
            "relUrl": "/lime-explainer-dashboards/",
            "date": " • Oct 10, 2020"
        }
        
    
  
    
  
    
        ,"post2": {
            "title": "Turbo-charge your spaCy NLP pipeline",
            "content": ". Background . Consider you have a large text dataset on which you want to apply some non-trivial NLP transformations, such as stopword removal followed by lemmatizing the words (i.e. reducing them to root form) in the text. spaCy is an industrial strength NLP library designed for just such a task. . In the example shown below, the New York Times dataset is used to showcase how to significantly speed up a spaCy NLP pipeline. The goal is to take in an article&#39;s text, and speedily return a list of lemmas with unnecessary words, i.e. stopwords, removed. . Pandas DataFrames provide a convenient interface to work with tabular data of this nature. First, import the necessary modules shown. . import re import pandas as pd import spacy . . Initial steps . The news data is obtained by running the preprocessing notebook (./data/preprocessing.ipynb), which processes the raw text file downloaded from Kaggle and performs some basic cleaning on it. This step generates a file that contains the tabular data (stored as nytimes.tsv). A curated stopword file is also provided in the same directory. . Additionally, during initial testing, we can limit the size of the DataFrame being worked on (to a subset of the total number of articles) for faster execution. For the final run, disable the limit by setting it to zero. . inputfile = &quot;data/spacy_multiprocess/nytimes-sample.tsv&quot; stopwordfile = &quot;data/spacy_multiprocess/stopwords/stopwords.txt&quot; limit = 0 . . Load spaCy model . Since we will not be doing any specialized tasks such as dependency parsing and named entity recognition in this exercise, these components are disabled when loading the spaCy model. . . Tip: spaCy has a sentencizer component that can be plugged into a blank pipeline. . The sentencizer pipeline simply performs tokenization and sentence boundary detection, following which lemmas can be extracted as token properties. . nlp = spacy.load(&#39;en_core_web_sm&#39;, disable=[&#39;tagger&#39;, &#39;parser&#39;, &#39;ner&#39;]) nlp.add_pipe(nlp.create_pipe(&#39;sentencizer&#39;)) . A method is defined to read in stopwords from a text file and convert it to a set in Python (for efficient lookup). . def get_stopwords(): &quot;Return a set of stopwords read in from a file.&quot; with open(stopwordfile) as f: stopwords = [] for line in f: stopwords.append(line.strip(&quot; n&quot;)) # Convert to set for performance stopwords_set = set(stopwords) return stopwords_set stopwords = get_stopwords() . Read in New York Times Dataset . The pre-processed version of the NYT news dataset is read in as a Pandas DataFrame. The columns are named date, headline and content - the text present in the content column is what will be preprocessed to remove stopwords and generate token lemmas. . def read_data(inputfile): &quot;Read in a tab-separated file with date, headline and news content&quot; df = pd.read_csv(inputfile, sep=&#39; t&#39;, header=None, names=[&#39;date&#39;, &#39;headline&#39;, &#39;content&#39;]) df[&#39;date&#39;] = pd.to_datetime(df[&#39;date&#39;], format=&quot;%Y-%m-%d&quot;) return df . df = read_data(inputfile) df.head(3) . date headline content . 0 2016-06-30 | washington nationals max scherzer baffles mets... | Stellar pitching kept the Mets afloat in the f... | . 1 2016-06-30 | mayor de blasios counsel to leave next month t... | Mayor Bill de Blasio’s counsel and chief legal... | . 2 2016-06-30 | three men charged in killing of cuomo administ... | In the early morning hours of Labor Day last y... | . Define text cleaner . Since the news article data comes from a raw HTML dump, it is very messy and contains a host of unnecessary symbols, social media handles, URLs and other artifacts. An easy way to clean it up is to use a regex that parses only alphanumeric strings and hyphens (so as to include hyphenated words) that are between a given length (3 and 50). This filters each document down to only meaningful text for the lemmatizer. . def cleaner(df): &quot;Extract relevant text from DataFrame using a regex&quot; # Regex pattern for only alphanumeric, hyphenated text with 3 or more chars pattern = re.compile(r&quot;[A-Za-z0-9 -]{3,50}&quot;) df[&#39;clean&#39;] = df[&#39;content&#39;].str.findall(pattern).str.join(&#39; &#39;) if limit &gt; 0: return df.iloc[:limit, :].copy() else: return df . df_preproc = cleaner(df) df_preproc.head(3) . date headline content clean . 0 2016-06-30 | washington nationals max scherzer baffles mets... | Stellar pitching kept the Mets afloat in the f... | Stellar pitching kept the Mets afloat the firs... | . 1 2016-06-30 | mayor de blasios counsel to leave next month t... | Mayor Bill de Blasio’s counsel and chief legal... | Mayor Bill Blasio counsel and chief legal advi... | . 2 2016-06-30 | three men charged in killing of cuomo administ... | In the early morning hours of Labor Day last y... | the early morning hours Labor Day last year gr... | . Now that we have just the clean, alphanumeric tokens left over, these can be further cleaned up by removing stopwords before proceeding to lemmatization. . Option 1: Sequentially process DataFrame column . The straightforward way to process this text is to use an existing method, in this case the lemmatize method shown below, and apply it to the clean column of the DataFrame using pandas.Series.apply. Lemmatization is done using the spaCy&#39;s underlying Doc representation of each token, which contains a lemma_ property. Stopwords are removed simultaneously with the lemmatization process, as each of these steps involves iterating through the same list of tokens. . def lemmatize(text): &quot;&quot;&quot;Perform lemmatization and stopword removal in the clean text Returns a list of lemmas &quot;&quot;&quot; doc = nlp(text) lemma_list = [str(tok.lemma_).lower() for tok in doc if tok.is_alpha and tok.text.lower() not in stopwords] return lemma_list . The resulting lemmas are stored as a list in a separate column preproc as shown below. . %%time df_preproc[&#39;preproc&#39;] = df_preproc[&#39;clean&#39;].apply(lemmatize) df_preproc[[&#39;date&#39;, &#39;content&#39;, &#39;preproc&#39;]].head(3) . CPU times: user 48.5 s, sys: 146 ms, total: 48.6 s Wall time: 48.6 s . date content preproc . 0 2016-06-30 | Stellar pitching kept the Mets afloat in the f... | [stellar, pitch, keep, mets, afloat, half, sea... | . 1 2016-06-30 | Mayor Bill de Blasio’s counsel and chief legal... | [mayor, bill, blasio, counsel, chief, legal, a... | . 2 2016-06-30 | In the early morning hours of Labor Day last y... | [early, labor, group, gunman, street, gang, cr... | . Applying this method to the clean column of the DataFrame and timing it shows that it takes almost a minute to run on 8,800 news articles. . Option 2: Use nlp.pipe . Can we do better? in the spaCy documentation, it is stated that &quot;processing texts as a stream is usually more efficient than processing them one-by-one&quot;. This is done by calling a language pipe, which internally divides the data into batches to reduce the number of pure-Python function calls. This means that the larger the data, the better the performance gain that can be obtained by nlp.pipe. . To use the language pipe to stream texts, a new lemmatizer method is defined that directly works on a spaCy Doc object. This method is then called in batches to work on a sequence of Doc objects that are streamed through the pipe as shown below. . def lemmatize_pipe(doc): lemma_list = [str(tok.lemma_).lower() for tok in doc if tok.is_alpha and tok.text.lower() not in stopwords] return lemma_list def preprocess_pipe(texts): preproc_pipe = [] for doc in nlp.pipe(texts, batch_size=20): preproc_pipe.append(lemmatize_pipe(doc)) return preproc_pipe . Just as before, a new column is created by passing data from the clean column of the existing DataFrame. Note that unlike in workflow #1 above, we do not use the apply method here - instead, the column of data (an iterable) is directly passed as an argument to the preprocessor pipe method. . %%time df_preproc[&#39;preproc_pipe&#39;] = preprocess_pipe(df_preproc[&#39;clean&#39;]) df_preproc[[&#39;date&#39;, &#39;content&#39;, &#39;preproc_pipe&#39;]].head(3) . CPU times: user 51.6 s, sys: 144 ms, total: 51.8 s Wall time: 51.8 s . date content preproc_pipe . 0 2016-06-30 | Stellar pitching kept the Mets afloat in the f... | [stellar, pitch, keep, mets, afloat, half, sea... | . 1 2016-06-30 | Mayor Bill de Blasio’s counsel and chief legal... | [mayor, bill, blasio, counsel, chief, legal, a... | . 2 2016-06-30 | In the early morning hours of Labor Day last y... | [early, labor, group, gunman, street, gang, cr... | . Timing this workflow doesn&#39;t seem to show improvement over the previous workflow, but as per the spaCy documentation, one would expect that as we work on bigger and bigger datasets, this approach should show some timing improvement (on average). . Option 3: Parallelize the work using joblib . We can do still better! The previous workflows sequentially worked through each news document to produce the lemma lists, which were then appended to the DataFrame as a new column. Because each row&#39;s output is completely independent of the other, this is an embarassingly parallel problem, making it ideal for using multiple cores. . The joblib library is recommended by spaCy for processing blocks of an NLP pipeline in parallel. Make sure that you pip install joblib before running the below section. . To parallelize the workflow, a few more helper methods must be defined. . Chunking: The news article content is a list of (long) strings where each document represents a single article&#39;s text. This data must be fed in &quot;chunks&quot; to each worker process started by joblib. Each call of the chunker method returns a generator that only contains that particular chunk&#39;s text as a list of strings. During lemmatization, each new chunk is retrieved based on the iterator index (with the previous chunks being &quot;forgotten&quot;). | . Flattening: Once joblib creates a set of worker processes that work on each chunk, each worker returns a &quot;list of lists&quot; containing lemmas for each document. These lists are then combined by the executor to provide a 3-level nested final &quot;list of lists of lists&quot;. To ensure that the length of the output from the executor is the same as the actual number of articles, a &quot;flatten&quot; method is defined to combine the result into a list of lists containing lemmas. As an example, two parallel executors would return a final nested list of the form: [[[a, b, c], [d, e, f]], [[g, h, i], [j, k, l]]], where [[a, b, c], [d, e, f]] and [[g, h, i], [j, k, l]] refer to the output from each executor (the final output is then concatenated to a single list by joblib). A flattened version of this result would be [[a, b, c], [d, e, f], [g, h, i], [j, k, l]], i.e. with one level of nesting removed. | . In addition to the above methods, a similar nlp.pipe method is used as in workflow #2, on each chunk of texts. Each of these methods is wrapped into a preprocess_parallel method that defines the number of worker processes to be used (7 in this case), breaks the input data into chunks and returns a flattened result that can then be appended to the DataFrame. For machine with a higher number of physical cores, the number of worker processes can be increased further. . The parallelized workflow using joblib is shown below. . from joblib import Parallel, delayed def chunker(iterable, total_length, chunksize): return (iterable[pos: pos + chunksize] for pos in range(0, total_length, chunksize)) def flatten(list_of_lists): &quot;Flatten a list of lists to a combined list&quot; return [item for sublist in list_of_lists for item in sublist] def process_chunk(texts): preproc_pipe = [] for doc in nlp.pipe(texts, batch_size=20): preproc_pipe.append(lemmatize_pipe(doc)) return preproc_pipe def preprocess_parallel(texts, chunksize=100): executor = Parallel(n_jobs=7, backend=&#39;multiprocessing&#39;, prefer=&quot;processes&quot;) do = delayed(process_chunk) tasks = (do(chunk) for chunk in chunker(texts, len(df_preproc), chunksize=chunksize)) result = executor(tasks) return flatten(result) . %%time df_preproc[&#39;preproc_parallel&#39;] = preprocess_parallel(df_preproc[&#39;clean&#39;], chunksize=1000) . CPU times: user 683 ms, sys: 248 ms, total: 932 ms Wall time: 17.2 s . df_preproc[[&#39;date&#39;, &#39;content&#39;, &#39;preproc_parallel&#39;]].head(3) . date content preproc_parallel . 0 2016-06-30 | Stellar pitching kept the Mets afloat in the f... | [stellar, pitch, keep, mets, afloat, half, sea... | . 1 2016-06-30 | Mayor Bill de Blasio’s counsel and chief legal... | [mayor, bill, blasio, counsel, chief, legal, a... | . 2 2016-06-30 | In the early morning hours of Labor Day last y... | [early, labor, group, gunman, street, gang, cr... | . Timing this parallelized workflow shows significant performance gains (almost 3x reduction in run time)! As the number of documents becomes larger, the additional overhead of starting multiple worker threads with joblib is quickly paid for, and this method can significantly outperform the sequential methods. . Effect of chunk size and batch size . Note that in the parallelized workflow, two parameters need to be specified - the optimum number can vary depending on the dataset. The chunksize controls the size of each chunk being worked on by each process. In this example, for 8,800 documents, a chunksize of 1000 is used. Too small a chunksize would mean that a large number of worker threads would spawn to deal with the large number of chunks overall, which can slow down execution. Generally, a chunksize of several hundred documents to a few thousand is a good starting point (of course, this depends on how big each document in the data is so that the chunks can fit into memory). . The batch size is parameter specific to nlp.pipe, and again, a good value depends on the data being worked on. For reasonably long-sized text such as news articles, it makes sense to keep the batch size reasonably small (so that each batch doesn&#39;t contain really long texts), so in this case 20 was chosen for the batch size. For other cases (e.g. Tweets) where each document is much shorter in length, a larger batch size can be used. . It is recommended to experiment with either parameter to see which combination produces the best performance. . Sets vs. Lists . . Important: Use sets over lists for lookups wherever possible. . Note that in the get_stopwords() method defined earlier on, the list of stopwords read in from the stopword file was converted to a set before using it in the lemmatizer method for stopword removal via lookups. This is a very useful trick in general, but specifically for stopword removal, the use of sets becomes all the more important. Why? . In any realistic stopword list, such as this one for a news dataset, it&#39;s reasonable to expect several hundred stopwords. This is because for downstream tasks such as topic modelling or sentiment analysis, there are a number of domain-specific words that need to be removed (very common verbs, useless abbreviations such as timezones, days of the week, etc.). Each word in each and every document needs to be compared against every word in the stopword list, which is an expensive operation over tens of thousands of documents. . It&#39;s well known that sets have $O(1)$ (i.e. constant) lookup time as opposed to lists, which have $O(n)$ lookup time. In the lemmatize() method, since we&#39;re checking each word for membership in the set of stopwords, we would expect sets to be much better than lists. To test this, we can rerun workflow #1 but this time, use a stopword list instead. . stopwords = list(stopwords) . %%time df_preproc[&#39;preproc_stopword_list&#39;] = df_preproc[&#39;clean&#39;].apply(lemmatize) df_preproc[[&#39;date&#39;, &#39;content&#39;, &#39;preproc_stopword_list&#39;]].head(3) . CPU times: user 1min 17s, sys: 108 ms, total: 1min 18s Wall time: 1min 18s . date content preproc_stopword_list . 0 2016-06-30 | Stellar pitching kept the Mets afloat in the f... | [stellar, pitch, keep, mets, afloat, half, sea... | . 1 2016-06-30 | Mayor Bill de Blasio’s counsel and chief legal... | [mayor, bill, blasio, counsel, chief, legal, a... | . 2 2016-06-30 | In the early morning hours of Labor Day last y... | [early, labor, group, gunman, street, gang, cr... | . This method now takes ~50% longer than it did before (when using a stopword set), which is a 1.5x increase in run time! This makes sense because in this case, the stopword list is about 500 words long, and each and every word in the corpus needs to be checked for membership in this reasonable-sized list. . Conclusions . In this exercise, a news article dataset (NY Times) was processed using a spaCy pipeline to output a list of lemmas representing the useful tokens present in each article&#39;s content. Because real-world news datasets are almost certainly bigger than this one, and can be unbounded in size, a fast, efficient NLP pipeline is necessary to perform any meaningful analysis on the data. The following steps are very useful in speeding up the spaCy pipeline. . Disable unnecessary components in spaCy model: The standard spaCy model&#39;s pipeline contains the tagger (to assign part-of-speech tags), the parser (to generate a dependency parse) and named entity recognition components. If any or none of these actions are desired, these components must be disabled immediately after loading the model (as shown above). . Use sets over lists for lookups: When performing lookups to compare one set of tokens against another, always perform membership checks using sets - lists are significantly slower for lookups! The larger the list/set of stopwords, the bigger the performance gain seen when using sets. . Use custom language pipes when possible: Setting up a language pipe using nlp.pipe is an extremely flexible and efficient way to process large blocks of text. Even better, spaCy allows you to individually disable components for each specific sub-task, for example, when you need to separately perform part-of-speech tagging and named entity recognition (NER). See the spaCy docs for examples on how to disable pipeline components during model loading, processing or handling custom blocks. . Use multiple cores when possible: When processing individual documents completely independent of one another, consider parallelizing the workflow by passing the computation to multiple cores. As the number of documents becoms higher and higher, the performance gains can be tremendous. One just needs to ensure that the documents are divided up into chunks, all of which must fit into memory at any given time. . I hope this was useful -- have fun testing these out in your next NLP project! .",
            "url": "https://prrao87.github.io/blog/spacy/nlp/performance/2020/05/02/spacy-multiprocess.html",
            "relUrl": "/spacy/nlp/performance/2020/05/02/spacy-multiprocess.html",
            "date": " • May 2, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": ". I’m a data scientist, developer and engineer with a scientific consulting background. My long-term interests are in Natural Language Processing (NLP), knowledge representation/reasoning and large-scale process automation. I am passionate about building intelligent, end-to-end automated systems using a range of machine learning and database technologies. I also enjoy communicating technical concepts to a broad and varied audience. . In the past, I’ve worked on a range of technical problems, from running computational physics simulations, to making complex data visualizations and building end-to-end machine learning workflows. My primary tools of choice are Python, numpy, pandas, PyTorch and Spark. I’m currently fascinated by (and am actively learning) the Julia programming language. .",
          "url": "https://prrao87.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "Comment Policy",
          "content": "Thanks for choosing to comment! Here are some basic guidelines: . Please be polite - a civil discussion can yield fruitful outcomes for both parties. | Don’t troll - comments that involve personal attacks or otherwise rude behaviour will be removed. | NO spam please - nothing to do with making money, visiting your new fancy website or other non-blog-related endorsements. | . “Few people are capable of expressing with equanimity opinions which differ from the prejudices of their social environment. Most people are incapable of forming such opinions.” - Albert Einstein (Letter to Leo Baeck, 1953) .",
          "url": "https://prrao87.github.io/blog/comment-policy/",
          "relUrl": "/comment-policy/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://prrao87.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}